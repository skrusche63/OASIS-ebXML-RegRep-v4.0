package de.kp.registry.server.neo4j.spi;

import java.math.BigInteger;

import org.oasis.ebxml.registry.bindings.query.QueryRequest;
import org.oasis.ebxml.registry.bindings.query.QueryResponse;
import org.oasis.ebxml.registry.bindings.query.ResponseOptionType;
import org.oasis.ebxml.registry.bindings.rim.QueryType;

import de.kp.registry.server.neo4j.database.ReadManager;

public class QueryManagerImpl {

	// reference to OASIS ebQuery object factory
	public static org.oasis.ebxml.registry.bindings.query.ObjectFactory ebQueryFactory = new org.oasis.ebxml.registry.bindings.query.ObjectFactory();

	// reference to OASIS ebRIM object factory
	public static org.oasis.ebxml.registry.bindings.rim.ObjectFactory ebRIMFactory = new org.oasis.ebxml.registry.bindings.rim.ObjectFactory();

	public QueryManagerImpl() {
	}
	
	public QueryResponse executeQuery(QueryRequest request) {

		// Attribute comment – The comment attribute if specified contains a String that describes the re-
		// quest. A server MAY save this comment within a CommentType instance and associate it with 
		// the AuditableEvent(s) for that request as described by [regrep-rim-v4.0].
		String comment = request.getComment();
		
		// Attribute id – The id attribute must be specified by the client to uniquely identify a request. Its 
		// value SHOULD be a UUID URN like “urn:uuid:a2345678-1234-1234-123456789012”.
		String requestId = request.getId();
		
		// Element ResponseOption - This required element allows the client to control 
		// the content of the QueryResponse generated by the server in response to this 
		// request.
		
		// ResponseOptionType:
		//		Attribute returnComposedObjects - This optional attribute specifies whether the RegistryObjects 
		//		returned should include composed objects as defined by Figure 1 in [regrep-rim-v4.0]. The default 
		//		is to return all composed objects.
		
		//		* Attribute returnType - This optional attribute specifies the type of RegistryObject to return within 
		//		the response. Values for returnType are as follows:
		//		* ObjectRef - This option specifies that the QueryResponse MUST contain a <rim:ObjectRefList> element. 
		//		  The purpose of this option is to return references to objects rather than the actual objects.
		//		* RegistryObject - This option specifies that the QueryResponse MUST contain a  <rim:RegistryObjectList> element 
		//		  containing <rim:RegistryObject> elements with xsi:type=“rim:RegistryObjectType”.
		//		* LeafClass - This option specifies that the QueryResponse MUST contain a collection of 
		//		 <rim:RegistryObjectList> element containing <rim:RegistryObject> elements that have an 
		//		 xsi:type attribute that corresponds to leaf classes as defined in [regrep-xsd-v4.0]. No RepositoryItems 
		//		 SHOULD be included for any rim:ExtrinsicObjectType instance in the <rim:Registry-
		//		 ObjectList> element.
		//		* LeafClassWithRepositoryItem - This option is the same as the LeafClass option with the additional 
		//		  requirement that the response include the RepositoryItems, if any, for every rim:ExtrinsicObjectType 
		//		  instance in the <rim:RegistryObjectList> element.
		//
		//		If “returnType” specified does not match a result returned by the query, then the server MUST use the 
		//		closest matching semantically valid returnType that matches the result. For example, consider a case 
		//		where a Query that matches rim:OrganizationType instances is asked to return LeafClassWithRepository-
		//		Item. As this is not possible, QueryManager will assume the LeafClass option instead.
		
		ResponseOptionType responseOption = request.getResponseOption();
		
		// Element Query - This element identifies a parameterized query and supplies values 
		// for its parameters.
		
		QueryType query = request.getQuery();
		
		// Attribute depth - This optional attribute specifies the pre-fetch depth 
		// of the response desired by the client. A depth of 0 (default) indicates 
		// that the server MUST return only those objects that match the query. 
		
		// A depth of N where N is greater that 0 indicates that the server MUST also 
		// return objects that are reachable by N levels of references via attributes 
		// that reference other objects. 
		
		// A depth of -1 indicates that the server MUST return all objects within the 
		// transitive closure of all references from objects that matches the query.
		
		BigInteger queryDepth = request.getDepth();
		
		// Attribute federated – This optional attribute specifies that the server must 
		// process this query as a federated query. By default its value is false. 
		
		// This value MUST be false when a server routes a federated query to another 
		// server. This is to avoid an infinite loop in federated query processing.
		
		Boolean federated = request.isFederated();
		
		// Attribute federation - This optional attribute specifies the id of the target
		// Federation for a federated query in case the server is a member of multiple 
		// federations. In the absence of this attribute a server must route the federated 
		// query to all registries that are a member of all federations configured within 
		// the local server. This value MUST be unspecified when a server routes a federated
		// query to another server. This is to avoid an infinite loop in federated query processing.
		
		String federation = request.getFederation();
		
		// Attribute format - This optional attribute specifies the format of the response 
		// desired by the client. The default value is “application/x-ebrs+xml” which returns 
		// the response in ebRS QueryResponse format.
		
		// __DESIGN__ only one format application/x-ebrs+xml supported
		String format = request.getFormat();
		
		// Attribute lang - This optional attribute specifies the natural language of the 
		// response desired by the client. The default value is to return the response with 
		// all available natural languages.
		
		String language = request.getLang();
		
		// Attribute matchOlderVersions – This optional attribute specifies the behavior 
		// when multiple versions of the same object are matched by a query. When the value 
		// of this attribute is specified as false (the default) then a server MUST only return 
		// the latest matched version for any object and MUST not return older versions of such 
		// objects even though they may match the query. When the value of this attribute is specified 
		// as true then a server MUST return all matched versions of all objects.
		
		Boolean matchOlderVersions = request.isMatchOlderVersions();
		
		// Attribute maxResults - This optional attribute specifies a limit on the maximum number
		// of results the client wishes the query to return. If unspecified, the server SHOULD return 
		// either all the results, or in case the result set size exceeds a server specific limit, the 
		// server SHOULD return a sub-set of results that are within the bounds of the server specific 
		// limit. This attribute is described further in the Iterative Queries section.
		
		BigInteger maxResults = request.getMaxResults();
		
		// Attribute startIndex - This optional integer value is used to indicate which result must be 
		// returned as the first result when iterating over a large result set. The default value is 0, 
		// which returns the result set starting
		
		BigInteger startIndex = request.getStartIndex();
		
		QueryResponse queryResponse = createQueryResponse(requestId);
		
		if (federated == true) {
			// call FederatedReadManager
			// FederatedReadManager frm = FederatedReadManager.getInstance();
			// return frm.executeQuery(federation, responseOption, comment, query, queryDepth, language, matchOlderVersions, maxResults, startIndex, queryResponse);
			return null;
		} else {
			ReadManager rm = ReadManager.getInstance();
			return rm.executeQuery(responseOption, comment, query, queryDepth, language, matchOlderVersions, maxResults, startIndex, queryResponse);
		}
		
	}
	
	private QueryResponse createQueryResponse(String requestId) {

		QueryResponse queryResponse = ebQueryFactory.createQueryResponse();
		
		queryResponse.setRequestId(requestId);
		
		
		return queryResponse;
	}
}
