package de.kp.registry.server.neo4j.spi;

import java.math.BigInteger;

import org.oasis.ebxml.registry.bindings.query.QueryRequest;
import org.oasis.ebxml.registry.bindings.query.QueryResponse;
import org.oasis.ebxml.registry.bindings.query.ResponseOptionType;
import org.oasis.ebxml.registry.bindings.rim.QueryType;

public class QueryManagerImpl {

	public QueryManagerImpl() {
	}
	
	public QueryResponse executeQuery(QueryRequest request) {

		// Element ResponseOption - This required element allows the client to control 
		// the content of the QueryResponse generated by the server in response to this 
		// request.
		
		ResponseOptionType responseOption = request.getResponseOption();
		
		// Element Query - This element identifies a parameterized query and supplies values 
		// for its parameters.
		
		QueryType query = request.getQuery();
		
		// Attribute depth - This optional attribute specifies the pre-fetch depth 
		// of the response desired by the client. A depth of 0 (default) indicates 
		// that the server MUST return only those objects that match the query. 
		
		// A depth of N where N is greater that 0 indicates that the server MUST also 
		// return objects that are reachable by N levels of references via attributes 
		// that reference other objects. 
		
		// A depth of -1 indicates that the server MUST return all objects within the 
		// transitive closure of all references from objects that matches the query.
		
		BigInteger queryDepth = request.getDepth();
		
		// Attribute federated – This optional attribute specifies that the server must 
		// process this query as a federated query. By default its value is false. 
		
		// This value MUST be false when a server routes a federated query to another 
		// server. This is to avoid an infinite loop in federated query processing.
		
		Boolean federated = request.isFederated();
		
		// Attribute federation - This optional attribute specifies the id of the target
		// Federation for a federated query in case the server is a member of multiple 
		// federations. In the absence of this attribute a server must route the federated 
		// query to all registries that are a member of all federations configured within 
		// the local server. This value MUST be unspecified when a server routes a federated
		// query to another server. This is to avoid an infinite loop in federated query processing.
		
		String federation = request.getFederation();
		
		// Attribute format - This optional attribute specifies the format of the response 
		// desired by the client. The default value is “application/x-ebrs+xml” which returns 
		// the response in ebRS QueryResponse format.
		
		String format = request.getFormat();
		
		// Attribute lang - This optional attribute specifies the natural language of the 
		// response desired by the client. The default value is to return the response with 
		// all available natural languages.
		
		String language = request.getLang();
		
		// Attribute matchOlderVersions – This optional attribute specifies the behavior 
		// when multiple versions of the same object are matched by a query. When the value 
		// of this attribute is specified as false (the default) then a server MUST only return 
		// the latest matched version for any object and MUST not return older versions of such 
		// objects even though they may match the query. When the value of this attribute is specified 
		// as true then a server MUST return all matched versions of all objects.
		
		Boolean matchOlderVersions = request.isMatchOlderVersions();
		
		// Attribute maxResults - This optional attribute specifies a limit on the maximum number
		// of results the client wishes the query to return. If unspecified, the server SHOULD return 
		// either all the results, or in case the result set size exceeds a server specific limit, the 
		// server SHOULD return a sub-set of results that are within the bounds of the server specific 
		// limit. This attribute is described further in the Iterative Queries section.
		
		BigInteger maxResults = request.getMaxResults();
		
		// Attribute startIndex - This optional integer value is used to indicate which result must be 
		// returned as the first result when iterating over a large result set. The default value is 0, 
		// which returns the result set starting
		
		BigInteger startIndex = request.getStartIndex();
		
		return null;
		
	}
}
