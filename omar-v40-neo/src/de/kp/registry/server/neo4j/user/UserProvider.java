package de.kp.registry.server.neo4j.user;

import java.math.BigInteger;
import java.util.List;
import java.util.UUID;

import org.oasis.ebxml.registry.bindings.query.QueryRequest;
import org.oasis.ebxml.registry.bindings.query.QueryResponse;
import org.oasis.ebxml.registry.bindings.query.ResponseOptionType;
import org.oasis.ebxml.registry.bindings.rim.PersonType;
import org.oasis.ebxml.registry.bindings.rim.QueryType;
import org.oasis.ebxml.registry.bindings.rim.RegistryObjectListType;
import org.oasis.ebxml.registry.bindings.rim.RegistryObjectType;
import org.oasis.ebxml.registry.bindings.rim.SlotType;
import org.oasis.ebxml.registry.bindings.rim.StringValueType;
import org.opensaml.saml2.core.Assertion;
import org.opensaml.saml2.core.NameID;

import de.kp.registry.client.service.impl.QueryManagerImpl;
import de.kp.registry.common.CanonicalConstants;
import de.kp.registry.common.ConnectionImpl;
import de.kp.registry.common.CredentialInfo;
import de.kp.registry.server.neo4j.service.MsgRegistryException;
import de.kp.registry.server.neo4j.service.context.RequestContext;

public class UserProvider {

	// reference to OASIS ebQuery object factory
	public static org.oasis.ebxml.registry.bindings.query.ObjectFactory ebQueryFactory = new org.oasis.ebxml.registry.bindings.query.ObjectFactory();

	// reference to OASIS ebRIM object factory
	public static org.oasis.ebxml.registry.bindings.rim.ObjectFactory ebRIMFactory = new org.oasis.ebxml.registry.bindings.rim.ObjectFactory();

	private RequestContext request;
	
	// this class supports the retrieval of the user 
	// instance for the caller's user from a remote 
	// user registry
	
	public UserProvider(RequestContext request) {
		this.request = request;
	}
	
	public PersonType getPerson() {
		
	   	CredentialInfo credentialInfo = request.getCredentialInfo();
    	if (credentialInfo == null) return null;
    	
    	Assertion assertion = credentialInfo.getAssertion();
    	if (assertion == null) return null;
   	
		NameID nameId = assertion.getSubject().getNameID();
		
		if (nameId.getFormat().equals(CanonicalConstants.SAML2_NAME_FORMAT) == false) return null;
		
		// build query request to retrieve a certain user by id
		String user = nameId.getValue();
		
		// build query request from existing arguments
		QueryRequest remoteRequest = createQueryRequest(user);
		QueryResponse remoteResponse = null;
		
		try {
			
			ConnectionImpl remoteConnection = new ConnectionImpl();

			remoteConnection.setRegistryUrl(CanonicalConstants.USER_REGISTRY_URL);
			remoteConnection.setCredentialInfo(credentialInfo);

			// invoke client side query manager to retrieve the
			// respective person type object
			QueryManagerImpl qm = new QueryManagerImpl(remoteConnection);
			remoteResponse = qm.executeQuery(remoteRequest);

		} catch (MsgRegistryException e) {
			e.printStackTrace();
		}
		
		if (remoteResponse == null) return null;
		
		RegistryObjectListType list = remoteResponse.getRegistryObjectList();
		if (list == null) return null;
		
		List<RegistryObjectType> registryObjects = list.getRegistryObject();
		if (registryObjects.isEmpty()) return null;
		
		if (registryObjects.size() > 0) return null;
		return (PersonType)registryObjects.get(0);

	}
	
	// to retrieve a certain person from a remote user registry, the
	// respective query type MUST point to a predefined parameterized
	// query type
	
	private QueryRequest createQueryRequest(String user) {
		
		QueryRequest queryRequest = ebQueryFactory.createQueryRequest();
		
		// - comment
		
		// The comment attribute if specified contains a String that describes the request.
		// A server MAY save this comment within a CommentType instance and associate it with
		// the AuditableEvent(s) for that request as described by [regrep-rim-v4.0].

		// NOT USED WITH THE CURRENT USE CASE

		// - id
		
		// The id attribute must be specified by the client to uniquely identify a request. 
		// Its value SHOULD be a UUID URN like “urn:uuid:a2345678-1234-1234-123456789012”.

		String requestId = "urn:uuid:" + UUID.randomUUID().toString();
		queryRequest.setId(requestId);
		
		// - ResponseOption
		
		// This required element allows the client to control the content of the QueryResponse 
		// generated by the server in response to this request.

		ResponseOptionType responseOption = ebQueryFactory.createResponseOptionType();
		
		responseOption.setReturnComposedObjects(false);
		responseOption.setReturnType(CanonicalConstants.REGISTRY_OBEJCT);

		queryRequest.setResponseOption(responseOption);
		
		// - Query
		
		// This element identifies a parameterized query and supplies values for its 
		// parameters. To describe the parameter, a SlotType instance is used; not, 
		// that this SlotType has no type description assigned.
		
		QueryType query = ebRIMFactory.createQueryType();
		query.setQueryDefinition(CanonicalConstants.QUERY_GetUserById);

		// create query parameter
		SlotType queryParam = ebRIMFactory.createSlotType();
		queryParam.setName(CanonicalConstants.QUERY_PARAM_USER_ID);
		
		StringValueType queryParamValue = ebRIMFactory.createStringValueType();
		queryParamValue.setValue(user);
		
		query.getSlot().add(queryParam);
		queryRequest.setQuery(query);
		
		// - depth

		// This optional attribute specifies the pre-fetch depth of the response desired by the
		// client. A depth of 0 (default) indicates that the server MUST return only those objects 
		// that match the query. A depth of N where N is greater that 0 indicates that the server
		// MUST also return objects that are reachable by N levels of references via attributes that
		// reference other objects. A depth of -1 indicates that the server MUST return all objects 
		// within the transitive closure of all references from objects that matches the query.

		// DEFAULT VALUE IS USED WITH THE CURRENT USE CASE
		queryRequest.setDepth(new BigInteger("0"));

		// - federated
		
		// This optional attribute specifies that the server must process this query as a federated 
		// query. By default its value is false. This value MUST be false when a server routes a 
		// federated query to another server. This is to avoid an infinite loop in federated query 
		// processing.
		
		queryRequest.setFederated(false);
		
		// - federation
		
		// This optional attribute specifies the id of the target Federation for a federated query 
		// in case the server is a member of multiple federations. In the absence of this attribute
		// a server must route the federated query to all registries that are a member of all federations 
		// configured within the local server. This value MUST be unspecified when a server routes a 
		// federated query to another server. This is to avoid an infinite loop in federated query 
		// processing.
		
		// NOT USED WITH THE CURRENT USE CASE
		
		// - format
		
		// This optional attribute specifies the format of the response desired by the client.
		// The default value is “application/x-ebrs+xml” which returns the response in ebRS
		// QueryResponse format.

		// NOT USED WITH THE CURRENT USE CASE
		
		// - lang
		
		// This optional attribute specifies the natural language of the response desired by
		// the client. The default value is to return the response with all available natural 
		// languages.

		// NOT USED WITH THE CURRENT USE CASE

		// - matchOlderVersions
		
		// This optional attribute specifies the behavior when multiple versions of the same 
		// object are matched by a query. When the value of this attribute is specified as
		// false (the default) then a server MUST only return the latest matched version for 
		// any object and MUST not return older versions of such objects even though they may 
		// match the query. When the value of this attribute is specified as true then a server 
		// MUST return all matched versions of all objects.
		
		queryRequest.setMatchOlderVersions(false);
		
		// - maxResults
		
		// This optional attribute specifies a limit on the maximum number of results the client 
		// wishes the query to return. If unspecified, the server SHOULD return either all the results,
		// or in case the result set size exceeds a server specific limit, the server SHOULD return a
		// sub-set of results that are within the bounds of the server specific limit. This attribute 
		// is described further in the Iterative Queries section.

		// NOT USED WITH THE CURRENT USE CASE

		// - startIndex
		
		// This optional integer value is used to indicate which result must be returned as the first 
		// result when iterating over a large result set. The default value is 0, which returns the
		// result set starting with index 0 (first result). This attribute is described further in the 
		// Iterative Queries section.

		// NOT USED WITH THE CURRENT USE CASE

		return queryRequest;

	}
}
